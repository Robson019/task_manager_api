// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/core/interfaces/primary/TaskManager.go
//
// Generated by this command:
//
//	mockgen -source=./src/core/interfaces/primary/TaskManager.go -destination=./src/api/handlers/mocks/TaskServicesMock.go
//

// Package mock_primary is a generated GoMock package.
package mock_primary

import (
	reflect "reflect"
	task "task_manager/src/core/domain/task"
	errors "task_manager/src/core/errors"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskManager is a mock of TaskManager interface.
type MockTaskManager struct {
	ctrl     *gomock.Controller
	recorder *MockTaskManagerMockRecorder
}

// MockTaskManagerMockRecorder is the mock recorder for MockTaskManager.
type MockTaskManagerMockRecorder struct {
	mock *MockTaskManager
}

// NewMockTaskManager creates a new mock instance.
func NewMockTaskManager(ctrl *gomock.Controller) *MockTaskManager {
	mock := &MockTaskManager{ctrl: ctrl}
	mock.recorder = &MockTaskManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskManager) EXPECT() *MockTaskManagerMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskManager) CreateTask(_task task.Task) (*uuid.UUID, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", _task)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskManagerMockRecorder) CreateTask(_task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskManager)(nil).CreateTask), _task)
}

// DeleteTask mocks base method.
func (m *MockTaskManager) DeleteTask(taskID uuid.UUID) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", taskID)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskManagerMockRecorder) DeleteTask(taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskManager)(nil).DeleteTask), taskID)
}

// FindTaskByID mocks base method.
func (m *MockTaskManager) FindTaskByID(taskID uuid.UUID) (*task.Task, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTaskByID", taskID)
	ret0, _ := ret[0].(*task.Task)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// FindTaskByID indicates an expected call of FindTaskByID.
func (mr *MockTaskManagerMockRecorder) FindTaskByID(taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTaskByID", reflect.TypeOf((*MockTaskManager)(nil).FindTaskByID), taskID)
}

// FindTasks mocks base method.
func (m *MockTaskManager) FindTasks() ([]task.Task, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTasks")
	ret0, _ := ret[0].([]task.Task)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// FindTasks indicates an expected call of FindTasks.
func (mr *MockTaskManagerMockRecorder) FindTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTasks", reflect.TypeOf((*MockTaskManager)(nil).FindTasks))
}

// UpdateTask mocks base method.
func (m *MockTaskManager) UpdateTask(_task task.Task) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", _task)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskManagerMockRecorder) UpdateTask(_task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskManager)(nil).UpdateTask), _task)
}
