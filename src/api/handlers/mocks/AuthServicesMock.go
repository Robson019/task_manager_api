// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/core/interfaces/primary/AuthManager.go
//
// Generated by this command:
//
//	mockgen -source=./src/core/interfaces/primary/AuthManager.go -destination=./src/api/handlers/mocks/AuthServicesMock.go
//

// Package mock_primary is a generated GoMock package.
package mock_primary

import (
	reflect "reflect"
	credentials "task_manager/src/core/domain/account/credentials"
	authorization "task_manager/src/core/domain/authorization"
	errors "task_manager/src/core/errors"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthManager is a mock of AuthManager interface.
type MockAuthManager struct {
	ctrl     *gomock.Controller
	recorder *MockAuthManagerMockRecorder
}

// MockAuthManagerMockRecorder is the mock recorder for MockAuthManager.
type MockAuthManagerMockRecorder struct {
	mock *MockAuthManager
}

// NewMockAuthManager creates a new mock instance.
func NewMockAuthManager(ctrl *gomock.Controller) *MockAuthManager {
	mock := &MockAuthManager{ctrl: ctrl}
	mock.recorder = &MockAuthManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthManager) EXPECT() *MockAuthManagerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthManager) Login(credentials credentials.Credentials) (authorization.Authorization, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", credentials)
	ret0, _ := ret[0].(authorization.Authorization)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthManagerMockRecorder) Login(credentials any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthManager)(nil).Login), credentials)
}

// Logout mocks base method.
func (m *MockAuthManager) Logout(accountID uuid.UUID) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", accountID)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthManagerMockRecorder) Logout(accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthManager)(nil).Logout), accountID)
}

// Refresh mocks base method.
func (m *MockAuthManager) Refresh(refreshToken string, accountID uuid.UUID) (authorization.Authorization, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", refreshToken, accountID)
	ret0, _ := ret[0].(authorization.Authorization)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockAuthManagerMockRecorder) Refresh(refreshToken, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockAuthManager)(nil).Refresh), refreshToken, accountID)
}

// SessionExists mocks base method.
func (m *MockAuthManager) SessionExists(accountID uuid.UUID, token string) (bool, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionExists", accountID, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// SessionExists indicates an expected call of SessionExists.
func (mr *MockAuthManagerMockRecorder) SessionExists(accountID, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionExists", reflect.TypeOf((*MockAuthManager)(nil).SessionExists), accountID, token)
}
