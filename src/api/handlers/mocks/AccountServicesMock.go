// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/core/interfaces/primary/AccountManager.go
//
// Generated by this command:
//
//	mockgen -source=./src/core/interfaces/primary/AccountManager.go -destination=./src/api/handlers/mocks/AccountServicesMock.go
//

// Package mock_primary is a generated GoMock package.
package mock_primary

import (
	reflect "reflect"
	account "task_manager/src/core/domain/account"
	errors "task_manager/src/core/errors"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountManager is a mock of AccountManager interface.
type MockAccountManager struct {
	ctrl     *gomock.Controller
	recorder *MockAccountManagerMockRecorder
}

// MockAccountManagerMockRecorder is the mock recorder for MockAccountManager.
type MockAccountManagerMockRecorder struct {
	mock *MockAccountManager
}

// NewMockAccountManager creates a new mock instance.
func NewMockAccountManager(ctrl *gomock.Controller) *MockAccountManager {
	mock := &MockAccountManager{ctrl: ctrl}
	mock.recorder = &MockAccountManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountManager) EXPECT() *MockAccountManagerMockRecorder {
	return m.recorder
}

// FetchProfileByID mocks base method.
func (m *MockAccountManager) FetchProfileByID(accountID uuid.UUID) (*account.Account, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProfileByID", accountID)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// FetchProfileByID indicates an expected call of FetchProfileByID.
func (mr *MockAccountManagerMockRecorder) FetchProfileByID(accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProfileByID", reflect.TypeOf((*MockAccountManager)(nil).FetchProfileByID), accountID)
}
