// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account.sql

package bridge

import (
	"context"

	"github.com/google/uuid"
)

const selectAccountByEmail = `-- name: SelectAccountByEmail :one
select a.id as account_id,
       a.email as account_email,
       a.password as account_password,
       a.hash as account_hash,
       r.id as role_id,
       r.name as role_name
    from account a
        inner join role r on r.id = a.role_id
    where a.email = $1 and a.is_deleted = false
`

type SelectAccountByEmailRow struct {
	AccountID       uuid.UUID
	AccountEmail    string
	AccountPassword string
	AccountHash     string
	RoleID          uuid.UUID
	RoleName        string
}

func (q *Queries) SelectAccountByEmail(ctx context.Context, email string) (SelectAccountByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, selectAccountByEmail, email)
	var i SelectAccountByEmailRow
	err := row.Scan(
		&i.AccountID,
		&i.AccountEmail,
		&i.AccountPassword,
		&i.AccountHash,
		&i.RoleID,
		&i.RoleName,
	)
	return i, err
}

const selectAccountByID = `-- name: SelectAccountByID :one
select a.id as account_id,
       a.email as account_email,
       a.password as account_password,
       a.hash as account_hash,
       r.id as role_id,
       r.name as role_name
    from account a
        inner join role r on r.id = a.role_id
    where a.id = $1 and a.is_deleted = false
`

type SelectAccountByIDRow struct {
	AccountID       uuid.UUID
	AccountEmail    string
	AccountPassword string
	AccountHash     string
	RoleID          uuid.UUID
	RoleName        string
}

func (q *Queries) SelectAccountByID(ctx context.Context, accountID uuid.UUID) (SelectAccountByIDRow, error) {
	row := q.db.QueryRowContext(ctx, selectAccountByID, accountID)
	var i SelectAccountByIDRow
	err := row.Scan(
		&i.AccountID,
		&i.AccountEmail,
		&i.AccountPassword,
		&i.AccountHash,
		&i.RoleID,
		&i.RoleName,
	)
	return i, err
}
