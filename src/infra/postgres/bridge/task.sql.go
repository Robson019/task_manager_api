// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: task.sql

package bridge

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const deleteTask = `-- name: DeleteTask :exec
UPDATE task SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteTask(ctx context.Context, taskID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTask, taskID)
	return err
}

const insertIntoTask = `-- name: InsertIntoTask :one
INSERT INTO task(title, description, status)
VALUES($1, $2, $3) RETURNING id
`

type InsertIntoTaskParams struct {
	Title       string
	Description sql.NullString
	Status      string
}

func (q *Queries) InsertIntoTask(ctx context.Context, arg InsertIntoTaskParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, insertIntoTask, arg.Title, arg.Description, arg.Status)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const selectTaskByID = `-- name: SelectTaskByID :one
SELECT t.id task_id,
       t.title task_title,
       t.description task_description,
       t.status task_status,
       t.created_at task_created_at,
       t.updated_at task_updated_at
FROM task t
WHERE t.id = $1 AND deleted_at IS NULL
ORDER BY t.title ASC
`

type SelectTaskByIDRow struct {
	TaskID          uuid.UUID
	TaskTitle       string
	TaskDescription sql.NullString
	TaskStatus      string
	TaskCreatedAt   sql.NullTime
	TaskUpdatedAt   sql.NullTime
}

func (q *Queries) SelectTaskByID(ctx context.Context, taskID uuid.UUID) (SelectTaskByIDRow, error) {
	row := q.db.QueryRowContext(ctx, selectTaskByID, taskID)
	var i SelectTaskByIDRow
	err := row.Scan(
		&i.TaskID,
		&i.TaskTitle,
		&i.TaskDescription,
		&i.TaskStatus,
		&i.TaskCreatedAt,
		&i.TaskUpdatedAt,
	)
	return i, err
}

const selectTasks = `-- name: SelectTasks :many
SELECT t.id task_id,
       t.title task_title,
       t.description task_description,
       t.status task_status,
       t.created_at task_created_at,
       t.updated_at task_updated_at
FROM task t
WHERE deleted_at IS NULL
ORDER BY t.title ASC
`

type SelectTasksRow struct {
	TaskID          uuid.UUID
	TaskTitle       string
	TaskDescription sql.NullString
	TaskStatus      string
	TaskCreatedAt   sql.NullTime
	TaskUpdatedAt   sql.NullTime
}

func (q *Queries) SelectTasks(ctx context.Context) ([]SelectTasksRow, error) {
	rows, err := q.db.QueryContext(ctx, selectTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectTasksRow
	for rows.Next() {
		var i SelectTasksRow
		if err := rows.Scan(
			&i.TaskID,
			&i.TaskTitle,
			&i.TaskDescription,
			&i.TaskStatus,
			&i.TaskCreatedAt,
			&i.TaskUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE task SET title = $1, description = $2,
                status = $3, updated_at = CURRENT_TIMESTAMP
WHERE id = $4 AND deleted_at IS NULL
`

type UpdateTaskParams struct {
	TaskTitle       string
	TaskDescription sql.NullString
	TaskStatus      string
	TaskID          uuid.UUID
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask,
		arg.TaskTitle,
		arg.TaskDescription,
		arg.TaskStatus,
		arg.TaskID,
	)
	return err
}
