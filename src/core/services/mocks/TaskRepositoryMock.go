// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/core/interfaces/secondary/TaskLoader.go
//
// Generated by this command:
//
//	mockgen -source=./src/core/interfaces/secondary/TaskLoader.go -destination=./src/core/services/mocks/TaskRepositoryMock.go
//

// Package mock_secondary is a generated GoMock package.
package mock_secondary

import (
	reflect "reflect"
	task "task_manager/src/core/domain/task"
	errors "task_manager/src/core/errors"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskLoader is a mock of TaskLoader interface.
type MockTaskLoader struct {
	ctrl     *gomock.Controller
	recorder *MockTaskLoaderMockRecorder
}

// MockTaskLoaderMockRecorder is the mock recorder for MockTaskLoader.
type MockTaskLoaderMockRecorder struct {
	mock *MockTaskLoader
}

// NewMockTaskLoader creates a new mock instance.
func NewMockTaskLoader(ctrl *gomock.Controller) *MockTaskLoader {
	mock := &MockTaskLoader{ctrl: ctrl}
	mock.recorder = &MockTaskLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskLoader) EXPECT() *MockTaskLoaderMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskLoader) CreateTask(_task task.Task) (*uuid.UUID, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", _task)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskLoaderMockRecorder) CreateTask(_task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskLoader)(nil).CreateTask), _task)
}

// DeleteTask mocks base method.
func (m *MockTaskLoader) DeleteTask(taskID uuid.UUID) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", taskID)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskLoaderMockRecorder) DeleteTask(taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskLoader)(nil).DeleteTask), taskID)
}

// FindTaskByID mocks base method.
func (m *MockTaskLoader) FindTaskByID(taskID uuid.UUID) (*task.Task, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTaskByID", taskID)
	ret0, _ := ret[0].(*task.Task)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// FindTaskByID indicates an expected call of FindTaskByID.
func (mr *MockTaskLoaderMockRecorder) FindTaskByID(taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTaskByID", reflect.TypeOf((*MockTaskLoader)(nil).FindTaskByID), taskID)
}

// FindTasks mocks base method.
func (m *MockTaskLoader) FindTasks() ([]task.Task, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTasks")
	ret0, _ := ret[0].([]task.Task)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// FindTasks indicates an expected call of FindTasks.
func (mr *MockTaskLoaderMockRecorder) FindTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTasks", reflect.TypeOf((*MockTaskLoader)(nil).FindTasks))
}

// UpdateTask mocks base method.
func (m *MockTaskLoader) UpdateTask(_task task.Task) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", _task)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskLoaderMockRecorder) UpdateTask(_task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskLoader)(nil).UpdateTask), _task)
}
