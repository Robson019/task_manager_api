// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/core/interfaces/secondary/AuthLoader.go
//
// Generated by this command:
//
//	mockgen -source=./src/core/interfaces/secondary/AuthLoader.go -destination=./src/core/services/mocks/AuthRepositoryMock.go
//

// Package mock_secondary is a generated GoMock package.
package mock_secondary

import (
	reflect "reflect"
	account "task_manager/src/core/domain/account"
	credentials "task_manager/src/core/domain/account/credentials"
	errors "task_manager/src/core/errors"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthLoader is a mock of AuthLoader interface.
type MockAuthLoader struct {
	ctrl     *gomock.Controller
	recorder *MockAuthLoaderMockRecorder
}

// MockAuthLoaderMockRecorder is the mock recorder for MockAuthLoader.
type MockAuthLoaderMockRecorder struct {
	mock *MockAuthLoader
}

// NewMockAuthLoader creates a new mock instance.
func NewMockAuthLoader(ctrl *gomock.Controller) *MockAuthLoader {
	mock := &MockAuthLoader{ctrl: ctrl}
	mock.recorder = &MockAuthLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthLoader) EXPECT() *MockAuthLoaderMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthLoader) Login(credentials credentials.Credentials) (*account.Account, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", credentials)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthLoaderMockRecorder) Login(credentials any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthLoader)(nil).Login), credentials)
}
