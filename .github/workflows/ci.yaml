name: CI and CD workflow

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build and Push
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.generate_tag.outputs.sha }}

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Setup go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Building and Running Tests
        run: |
          go mod tidy
          go test ./... -v

      - name: Generate Tag
        id: generate_tag
        run: |
          SHA=$(echo $GITHUB_SHA | head -c7)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Login into the Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Tag API Image
        run: | 
          docker build -t robson022/task_manager_api:${{ steps.generate_tag.outputs.sha }} -f tools/docker/production/Dockerfile.api .

      - name: Build and Tag Database Image
        run: |
          docker build -t robson022/task_manager_database:${{ steps.generate_tag.outputs.sha }} -f tools/docker/production/Dockerfile.postgres .

      - name: Push API Image to DockerHub
        run: |
          docker push robson022/task_manager_api:${{ steps.generate_tag.outputs.sha }}

      - name: Push Database Image to DockerHub
        run: |
          docker push robson022/task_manager_database:${{ steps.generate_tag.outputs.sha }}

  deploy:
    name: Deploy on Digital Ocean
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Copy docker-compose file via ssh
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          source: "./docker-compose.yml"
          target: "~/"

      - name: Deploy on Digital Ocean via ssh
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          script: |
            # Extract the tag on job build
            TAG=${{ needs.build.outputs.docker_tag }}
            # Create env file
            [ -e .env ] && rm .env
            touch .env
            echo  "DOCKER_IMAGE_TAG=$TAG" > .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env
            echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
            echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
            echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
            echo "SERVER_CASBIN_AUTH_MODEL=${{ secrets.SERVER_CASBIN_AUTH_MODEL }}" >> .env
            echo "SERVER_CASBIN_AUTH_POLICY=${{ secrets.SERVER_CASBIN_AUTH_POLICY }}" >> .env
            echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
            echo "DATABASE_SSL_MODE=${{ secrets.DATABASE_SSL_MODE }}" >> .env
            echo "DATABASE_SCHEMA=${{ secrets.DATABASE_SCHEMA }}" >> .env
            echo "DATABASE_MIGRATIONS_PATH=${{ secrets.DATABASE_MIGRATIONS_PATH }}" >> .env
            # Login Docker
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            # Pulling Images
            docker pull robson022/task_manager_api:$TAG
            docker pull robson022/task_manager_database:$TAG
            #Stop Containers
            CONTAINERS=$(docker ps -q)
            if [ -n "$CONTAINERS" ]; then
              docker stop $CONTAINERS
            else
              echo " No running containers"
            fi
            #Remove Old Containers
            CONTAINERS=$(docker ps -a -q)
            if [ -n "$CONTAINERS" ]; then
              docker rm $CONTAINERS
            else
              echo " No containers to remove"
            fi
            #Run a new container from a new image
            docker-compose -f docker-compose.yml up -d --build